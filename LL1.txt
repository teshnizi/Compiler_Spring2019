program -> declaration-list EOF #main_defined_routine
declaration-list -> declaration-list_1
declaration-list_1 -> declaration declaration-list_1
declaration-list_1 -> ε
declaration -> int #pint Fint
declaration -> void #pvoid Fvoid
Fint -> #pid ID FID_5
FID_5 -> FID_1
FID_5 -> #start_func_scope ( params ) #set_signature compound-stmt #end_func_scope
Fvoid -> #pid ID FID_6
FID_6 -> FID_1
FID_6 -> #start_func_scope ( params ) #set_signature compound-stmt #end_func_scope
FID_1 -> #push1 ; #define_var
FID_1 -> [ #pnum NUM ] ; #define_var
type-specifier -> int #pint
type-specifier -> void #pvoid
params -> int #pint Ftype-specifier_1 param-list_1 #has_params
params -> void #pvoid Fvoid_1
Fvoid_1 -> Ftype-specifier_1 param-list_1
Fvoid_1 -> ε
param-list_1 -> , param param-list_1
param-list_1 -> ε
param -> type-specifier Ftype-specifier_1
Ftype-specifier_1 -> #pid ID FID_2 #define_param
FID_2 -> ε
FID_2 -> [ ]
compound-stmt -> { declaration-list statement-list }
statement-list -> statement-list_1
statement-list_1 -> statement statement-list_1
statement-list_1 -> ε
statement -> expression-stmt
statement -> compound-stmt
statement -> selection-stmt
statement -> iteration-stmt
statement -> return-stmt
statement -> switch-stmt
expression-stmt -> expression ; #pop_expression
expression-stmt -> continue #check_continue_scope ;
expression-stmt -> break #check_break_scope ;
expression-stmt -> ;
selection-stmt -> if  ( expression ) #save #start_if_scope statement #end_if_scope else #jpf_save #start_else_scope statement #end_else_scope #jp
iteration-stmt -> while #label ( expression ) #save #start_while_scope statement #while_routine #end_while_scope
return-stmt -> return Freturn
Freturn -> #return_routine_void ;
Freturn -> expression #return_routine_int ;
switch-stmt -> switch  ( expression ) { #start_switch_scope case-stmts default-stmt #end_switch_scope }
case-stmts -> case-stmts_1
case-stmts_1 -> case-stmt case-stmts_1
case-stmts_1 -> ε
case-stmt -> case NUM : statement-list
default-stmt -> default : statement-list
default-stmt -> ε
expression -> #pid ID FID_3
expression -> ( expression ) term_1 additive-expression_1 Fadditive-expression
expression -> #pnum NUM term_1 additive-expression_1 Fadditive-expression
expression -> + factor term_1 additive-expression_1 Fadditive-expression
expression -> - factor #neg term_1 additive-expression_1 Fadditive-expression
FID_3 -> FID FFID
FID_3 -> ( #push0 args ) #call_func term_1 additive-expression_1 Fadditive-expression
FFID -> = F= #assign
FFID -> * single-factor #mult term_1 additive-expression_1 Fadditive-expression
FFID -> addop term #addop_routine additive-expression_1 Fadditive-expression
FFID -> < additive-expression #lt
FFID -> == additive-expression #eq
FFID -> ε
F= -> expression
F= -> = additive-expression
FID -> #push0 ε #calculate_indexed_var
FID -> [ expression ] #calculate_indexed_var
Fadditive-expression -> RELOP additive-expression #relop_routine
Fadditive-expression -> ε
RELOP -> < #plt
RELOP -> == #peq
additive-expression -> term additive-expression_1
additive-expression_1 -> addop term #addop_routine additive-expression_1
additive-expression_1 -> ε
addop -> + #padd
addop -> - #psub
term -> single-factor term_1
term_1 -> * single-factor #mult term_1
term_1 -> ε
single-factor -> factor
single-factor -> + factor
single-factor -> - factor #neg
factor ->  ( expression )
factor -> #pid ID FID_4
factor -> #pnum NUM
FID_4 -> FID
FID_4 -> ( #push0 args ) #call_function
args -> arg-list
args -> ε #push0
arg-list -> expression #add_arg arg-list_1
arg-list_1 -> , expression #add_arg arg-list_1
arg-list_1 -> ε
