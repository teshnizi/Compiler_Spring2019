program -> declaration-list EOF
declaration-list -> S1
S1 -> declaration S1
S1 -> ε
declaration -> var-declaration
declaration -> fun-declaration
var-declaration -> type-specifier ID T1
T1 -> ;
T1 -> [ NUM ] ;
type-specifier -> int
type-specifier -> void
fun-declaration -> type-specifier ID ( params ) compound-stmt
params -> param-list
params -> void
param-list -> param S2
S2 -> , param S2
S2 -> ε
param -> type-specifier ID T2
T2 -> [ ]
T2 -> ε
compound-stmt -> { declaration-list statement-list }
statement-list -> S3
S3 -> statement S3
S3 -> ε
statement -> expression-stmt
statement -> compound-stmt
statement -> selection-stmt
statement -> iteration-stmt
statement -> return-stmt
statement -> switch-stmt
expression-stmt -> expression ;
expression-stmt -> continue ;
expression-stmt -> break ;
expression-stmt -> ;
selection-stmt -> if ( expression ) statement else statement
iteration-stmt -> while ( expression ) statement
return-stmt -> return T3
T3 -> ;
T3 -> expression ;
switch-stmt -> switch ( expression ) { case-stmts default-stmt }
case-stmts -> S4
S4 -> ε
S4 -> case-stmt S4
case-stmt -> case NUM : statement-list
default-stmt -> default : statement-list
default-stmt -> ε
expression -> var = expression
expression -> simple-expression
var -> ID T4
T4 -> [ expression ]
T4 -> ε
simple-expression -> additive-expression T5
T5 -> relop additive-expression
T5 -> ε
relop -> <
relop -> ==
additive-expression -> term S5
S5 -> ε
S5 -> addop term S5
addop -> +
addop -> -
term -> signed-factor S6
S6 -> ε
S6 -> * signed-factor S6
signed-factor -> factor
signed-factor -> + factor
signed-factor -> - factor
factor -> ( expression )
factor -> var
factor -> call
factor -> NUM
call -> ID ( args )
args -> arg-list
args -> ε
arg-list -> expression S7
S7 -> ε
S7 -> , expression S7