program -|
declaration-list EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
declaration-list_1 EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
declaration int, void, EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
Fint int, void, EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
FID_5 int, void, EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
Fvoid int, void, EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
FID_6 int, void, EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
FID_1 int, void, EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }
type-specifier ID
params )
Fvoid_1 )
param-list_1 )
param comma, )
Ftype-specifier_1 comma, )
FID_2 comma, )
compound-stmt int, void, EOF, {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
statement-list }, case, default
statement-list_1 }, case, default
statement {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
expression-stmt {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
selection-stmt {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
iteration-stmt {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
return-stmt {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
Freturn {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
switch-stmt {, continue, break, ;, if, while, return, switch, ID, (, NUM, +, -, }, else, case, default
case-stmts default, }
case-stmts_1 default, }
case-stmt case, default, }
default-stmt }
expression ;, ), ], comma
FID_3 ;, ), ], comma
FFID ;, ), ], comma
F= ;, ), ], comma
FID =, *, <, +, -, ;, ), ==, ], comma
Fadditive-expression ;, ), ], comma
RELOP +, -, (, ID, NUM
additive-expression ;, ), ], comma
additive-expression_1 <, ==, ;, ), ], comma
addop +, -, (, ID, NUM
term +, -, <, ==, ;, ), ], comma
term_1 +, -, <, ==, ;, ), ], comma
single-factor *, +, -, <, ==, ;, ), ], comma
factor *, +, -, <, ==, ;, ), ], comma
FID_4 *, +, -, <, ==, ;, ), ], comma
args )
arg-list )
arg-list_1 )